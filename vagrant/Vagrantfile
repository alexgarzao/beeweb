# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/xenial64"

  # config.ssh.username = "vagrant"
  # config.ssh.password = "vagrant"


  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:

  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = true

    # Customize the amount of memory on the VM:
    vb.memory = "2048"
  end

  # View the documentation for the provider you are using for more
  # information on available options.

  # config.ssh.forward_x11 = true

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.


  # config.vm.provision :shell, :privileged => false, :path => "bootstrap_ubuntu1204.sh"



  config.vm.provision "shell", privileged: false, inline: <<-SHELL
    echo I am provisioning...
    whoami
    echo I am provisioning...

    sudo apt-get -y update
    sudo apt-get -y upgrade


    # XFCE
    sudo apt-get install -y xfce4
    sudo apt-get install -y xfce4 virtualbox-guest-dkms virtualbox-guest-utils virtualbox-guest-x11
    sudo apt install -y xserver-xorg-legacy
    sudo VBoxClient --clipboard
    sudo VBoxClient --draganddrop
    sudo VBoxClient --display
    sudo VBoxClient --checkhostversion
    sudo VBoxClient --seamless
    sudo chmod ug+s /usr/lib/xorg/Xorg
    sudo echo "allowed_users=anybody" >> /etc/X11/Xwrapper.config

    # echo "startxfce4 &" >> ~/.bashrc


    # Python 3.6
    sudo add-apt-repository -y ppa:jonathonf/python-3.6
    sudo apt update -y
    sudo apt install -y python3.6
    sudo apt-get install -y python3.6-dev
    sudo apt-get -y install python-pip
    sudo pip install --upgrade pip

    # sudo pip3 install -y virtualenv
    sudo pip install virtualenv


    # sudo apt-get -y install python3-pip
    echo "export LC_ALL=en_US.UTF-8" >> ~/.bashrc
    echo "export LC_CTYPE=en_US.UTF-8" >> ~/.bashrc
    source ~/.bashrc

    sudo su root -c 'echo "LANG=en_US.UTF-8" >> /etc/environment'
    sudo su root -c 'echo "LANGUAGE=en_US.UTF-8" >> /etc/environment'
    sudo su root -c 'echo "LC_ALL=en_US.UTF-8" >> /etc/environment'
    sudo su root -c 'echo "LC_CTYPE=en_US.UTF-8" >> /etc/environment'

    #ODBC
    sudo apt-get install -y unixodbc-dev
    sudo apt-get install -y unixodbc odbcinst1debian2 libodbc1
    # sudo apt-get install -y unixodbc-dev-utf16
    # sudo apt-get install -y unixodbc-utf16 odbcinst1debian2-utf16


    # Driver 17 SQL Server
    # https://docs.microsoft.com/pt-br/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-2017
    sudo su root -c "curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -"

    #Ubuntu 16.04
    sudo su root -c "curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list > /etc/apt/sources.list.d/mssql-release.list"

    sudo apt-get update -y
    sudo ACCEPT_EULA=Y apt-get install -y msodbcsql17
    # optional: for bcp and sqlcmd
    sudo ACCEPT_EULA=Y apt-get install -y mssql-tools
    echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bash_profile
    echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
    source ~/.bashrc
    # optional: for unixODBC development headers
    sudo apt-get install -y unixodbc-dev

    sudo ACCEPT_EULA=Y apt-get install -y msodbcsql mssql-tools

#
#
#
#
#
#
#
#     # X
# #     sudo VBoxClient-all
#     sudo apt-get install -y xorg gnome-core gnome-system-tools gnome-app-install
#     sudo apt-get install -y xserver-xorg-video-intel
#     sudo apt-get install -y gnome-shell ubuntu-gnome-desktop
#     sudo apt-get install -y xfce4 virtualbox-guest-dkms virtualbox-guest-utils virtualbox-guest-x11
#
#     sudo DEBIAN_FRONTEND=noninteractive apt-get -y install xubuntu-core
#     sudo DEBIAN_FRONTEND=noninteractive apt-get -y install virtualbox-guest-dkms virtualbox-guest-utils virtualbox-guest-x11
#     sudo VBoxClient --checkhostversion
#     sudo VBoxClient --clipboard
#     sudo VBoxClient --display
#     sudo VBoxClient --draganddrop
#     sudo VBoxClient --seamless
#
#

    # Chrome
    sudo wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    sudo apt install -y ./google-chrome-stable_current_amd64.deb


    # beeweb
    sudo su vagrant
    git clone https://github.com/alexgarzao/beeweb.git
    cd beeweb
    virtualenv -p python3.6 .env
    source .env/bin/activate
    pip install -r requirements.txt
    pip install --editable cli/.

    python cli/webdriver_download/webdriver.py update

    sudo reboot --no-wall



    #ubuntu-gnome-desktop


    # sudo apt-get upgrade -y
    # sudo apt-get autoremove -y
  SHELL
end
